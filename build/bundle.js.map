{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/components/number-input-box.svelte","../../node_modules/svelte/store/index.mjs","../../../src/stores/cash-drawer.ts","../../../src/utilities/precise.ts","../../src/components/money-pile2.svelte","../../src/components/give-change-button.svelte","../../../src/utilities/make-change.ts","../../src/components/transaction-controls.svelte","../../src/components/randomize-button.svelte","../../src/components/empty-drawer.svelte","../../src/components/slot-interface.svelte","../../src/components/drawer-interface.svelte","../../src/App.svelte","../../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.48.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","<script lang=\"ts\">\r\n    import type {Writable} from 'svelte/store';\r\n\r\n    export let drawerSlot: Writable<number>; // configure to be usable by main transaction: use ternary operator  \r\n    export let name: string; // IS THIS THE NAME OF THE MONEY VALUE FOUND IN THE TILL STORE?\r\n    export let step: number;\r\n    export let editable: boolean;\r\n\r\n    const minimum: number = 0;\r\n    \r\n    $: slotTotal = Math.round(100 * Number($drawerSlot)) / 100 || 0; // Dollar value Total for this slot; default to an empty slot\r\n    $: slotDisplay = \"$\".concat(String(slotTotal.toFixed(2)));\r\n\r\n    $: validatedIn = slotTotal; // validated input\r\n\r\n    const validate = function(event: any):void{ // validate user input and alter the value in the drawer store\r\n        event.preventDefault();\r\n        validatedIn = Number(validatedIn) || 0; // ensures the validated input is always a number even if a letter key is pressed\r\n        drawerSlot.update(n => n = Math.round(100 * validatedIn) / 100);\r\n    }\r\n\r\n    const directlyEditable = function(){\r\n        return !editable;\r\n    }\r\n</script>\r\n\r\n<span>\r\n    <input \r\n        class=\"money-in\"\r\n        type=\"number\"\r\n        inputmode=\"numeric\"\r\n        name={name}\r\n        bind:value={validatedIn} \r\n        placeholder={'$ 0.00'}\r\n        min={minimum}\r\n        step={step}\r\n        on:input={validate}\r\n        readonly={directlyEditable()}\r\n        >\r\n    <p class=\"slot-value\">{slotDisplay}</p>\r\n</span>\r\n\r\n<style>\r\n    .money-in{\r\n        text-align: center;\r\n        width: 4rem;\r\n        margin: auto;\r\n        height: min-content;\r\n        border: 2px solid #cccccc;\r\n    }\r\n    .slot-value{\r\n        background-color: #000;\r\n        font-size: 1em;\r\n        font-family: 'Courier New', Courier, monospace;\r\n        font-weight: bold;\r\n        width: 4rem;\r\n        border-radius: 3px;\r\n    }\r\n</style>","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n",null,null,"<script lang=\"ts\">\r\n    import type { MoneyInstance } from \"../global\";\r\n\r\n    export let pile: Array<MoneyInstance> | [] = [];\r\n\r\n    function classifyMoney(moneyType: string): string{\r\n        switch(moneyType){\r\n            case 'PENNY': return \"penny-picture\";\r\n            case 'NICKEL': return \"cent-picture nickel-picture\"\r\n            case 'DIME':\r\n            case 'QUARTER': return \"cent-picture\";\r\n            default: return 'dollar-picture';\r\n        }\r\n    }\r\n\r\n</script>\r\n\r\n{#if pile.length}\r\n<h4>Change Given:</h4>\r\n<ol class=\"grid-container\">\r\n    {#each pile as billCoin}\r\n        <li>\r\n            <p>{billCoin[0]}</p>\r\n            <p class={classifyMoney(billCoin[0])}>{'$'.concat(String(Number(billCoin[1]).toFixed(2)))}</p>\r\n        </li>\r\n    {/each}\r\n</ol>\r\n\r\n{:else}\r\n<p>No change given: either no change was due, there were insufficient funds, or there was an error. Make a new transaction.</p>\r\n{/if}\r\n\r\n<style>\r\n    h4{\r\n        color: #00ff00;\r\n    }\r\n    /* .money-picture{\r\n        background-color: #cccccc;\r\n        font-weight: bold;\r\n        width: fit-content;\r\n        color: #000000;\r\n        height: 6rem;\r\n    } */\r\n    .cent-picture{\r\n        font-size: 1rem;\r\n        font-weight: bold;\r\n        color: #000;\r\n        display: grid;\r\n        background-image: linear-gradient(45deg, #cccccc, #818181, #111111);\r\n        border-radius: 100%;\r\n        border: 2px dotted #cccccc;\r\n        height: 3.5rem;\r\n        width: 3.5rem;\r\n        text-justify: auto;\r\n        text-align: center;\r\n        align-content: center;\r\n        justify-content: center;\r\n    }\r\n    .dollar-picture{\r\n        font-size: 1rem;\r\n        font-weight: bold;\r\n        color: #000;\r\n        display: grid;\r\n        background-color: #008800;\r\n        border-radius: 5%;\r\n        border: 5px solid #556b2f;\r\n        height: fit-content;\r\n        align-content: center;\r\n        justify-content: center;\r\n    }\r\n    .penny-picture{\r\n        font-size: 1rem;\r\n        font-weight: bold;\r\n        color: #000;\r\n        display: grid;\r\n        background-image: linear-gradient(45deg,  #ffb200, #8b3613, #ff6100);\r\n        border-radius: 100%;\r\n        border: 2px solid #8b3613;\r\n        height: 3.5rem;\r\n        width: 3.5rem;\r\n        align-content: center;\r\n        justify-content: center;\r\n    }\r\n    .nickel-picture{\r\n        border: 2px solid #cccccc;\r\n    }\r\n</style>","<script lang=\"ts\">\r\n    import { default as makeChange } from '../utilities/make-change';\r\n    import { price, paid, drawerSlots } from '../stores/cash-drawer';\r\n    import type { MoneyInstance } from '../global';\r\n    import MoneyPile2 from './money-pile2.svelte';\r\n    import { default as precise } from '../utilities/precise'; // tool for keeping Javascript numbers precise when they are decimals\r\n\r\n\r\n    $: prodPrice = $price as number; // price of the product\r\n    $: cashGiven = $paid as number; // payment given by customer\r\n\r\n\r\n    // destructure array of slot store values and create a reactive, numeric variable for each:\r\n    let [p,n,d,q,o,f,t,tw,h] = drawerSlots;\r\n    // These Writable<number> stores need to be converted to primitive numbers for use in the make-change program.\r\n    $: totPennies = Number($p);\r\n    $: totNickles = Number($n);\r\n    $: totDimes = Number($d);    \r\n    $: totQuarters = Number($q);\r\n    $: totOnes = Number($o);    \r\n    $: totFives = Number($f);\r\n    $: totTens = Number($t);    \r\n    $: totTwenties = Number($tw);\r\n    $: totHundreds = Number($h);\r\n    // ^ Not the most elegant solution, but store values have to be defined/ subscribed to/ declared \r\n    // at the top level of the component in the version of Svelte that I am using. Thus, abstracting this out\r\n    // with a loop or callback function would not work.\r\n\r\n    // TO-DO: CREATE DEBUGGING DISPLAY FOR drawerBuffer\r\n    $: status = 'OPEN';\r\n    $: errorMessage = '';\r\n    $: message = errorMessage || '';\r\n    \r\n    // Array representing change given to customer after a sale:\r\n    let changePile: Array<MoneyInstance> | [] = [];\r\n\r\n    function stackUpChange(newPile: Array<MoneyInstance>){\r\n        changePile.length = 0; // delete the record of change given on the previous transaction\r\n        changePile = [...newPile]; // update the changePile to the new set of money given out by the most recent transaction\r\n    }\r\n\r\n    $: pileOfChange = changePile; // reactive to any updates to the changePile, which is updated with each transaction\r\n\r\n    function drawerInterface(event: MouseEvent): void {\r\n        event.preventDefault();\r\n\r\n        let drawerBuffer: Array<MoneyInstance> = [\r\n            // needs to be inside handler function to copy values w/o breaking relationship between the reactive variables above and the storeVals\r\n            ['PENNY', totPennies],\r\n            ['NICKEL', totNickles],\r\n            ['DIME', totDimes],\r\n            ['QUARTER', totQuarters],\r\n            ['ONE', totOnes],\r\n            ['FIVE', totFives],\r\n            ['TEN', totTens],\r\n            ['TWENTY', totTwenties], // ADD $50 BILL SPOT\r\n            ['ONE HUNDRED', totHundreds],\r\n        ];\r\n              \r\n        \r\n        // copy the list of money slots in the cash drawer as well as their current values\r\n        //^ NB: the buffer array above will be mutated during the makeChange function execution. \r\n        // It's value will need to be written to the store after the makeChange function has run.\r\n        let transaction = makeChange(prodPrice, cashGiven, drawerBuffer);\r\n        let change: Array<MoneyInstance> | [] = transaction.change; // update store value\r\n        stackUpChange(change);\r\n\r\n        status = transaction.status;\r\n\r\n        if(transaction.message){\r\n            console.log('error message:', transaction.message as string);\r\n            errorMessage = transaction.message;\r\n            return; // if there is an error message, cancel the transaction without taking money out of the drawer\r\n        }\r\n        console.log('change given:', ...change);\r\n        console.log('remaining in drawer: ', ...drawerBuffer)\r\n        drawerSlots.forEach((slot, index)=>{\r\n            // if this block is reached, money needs to be taken out of the drawer\r\n            slot.update(n => precise(drawerBuffer[index][1] as number));\r\n            // use the drawerBuffer to update the state of the cash drawer and the change pile\r\n        });\r\n        return;\r\n    }\r\n</script>\r\n\r\n<button class=\"good-button\" id=\"calc-change\" on:click={drawerInterface}>Make Change</button>\r\n<p>Drawer Status: {status}</p>\r\n{#if (errorMessage.length)}\r\n    <p class='error-message'>{message}</p>\r\n{/if}\r\n<svelte:component this={MoneyPile2} pile={pileOfChange}></svelte:component>\r\n\r\n<style>\r\n    .error-message{\r\n        color: #ff0000;\r\n        font-family: 'Courier New', Courier, monospace;\r\n        font-size: 1rem;\r\n        font-weight: bold;\r\n    }\r\n</style>",null,"<script lang=\"ts\">\r\n    import NumberBox from './number-input-box.svelte';\r\n    import { price, paid } from '../stores/cash-drawer';\r\n    import GiveChangeButton from './give-change-button.svelte';\r\n\r\n    $: due = `$${String(Number($paid - $price).toFixed(2))}`;\r\n</script>\r\n\r\n<section class=\"wrapper\">\r\n    <section class=\"grid-container main-sale\">\r\n        <span class=\"grid-item main-sale-in\">\r\n            <label class=\"slot-label\" for=\"price\">Price:</label>\r\n            <svelte:component \r\n                this={NumberBox} \r\n                name={'price'} \r\n                step={0.01} \r\n                drawerSlot={price}\r\n                editable={true}></svelte:component>\r\n        </span>\r\n        <span class=\"grid-item main-sale-in\">\r\n            <label class=\"slot-label\" for=\"paid\">Paid:</label>\r\n            <svelte:component \r\n                this={NumberBox} \r\n                name={'paid'} \r\n                step={0.01} \r\n                drawerSlot={paid}\r\n                editable={true}></svelte:component>\r\n        </span>  \r\n        <span>\r\n            Change Due: <p class=\"slot-value\">{due}</p>\r\n        </span>\r\n    </section>\r\n    <svelte:component this={GiveChangeButton}></svelte:component>\r\n</section>\r\n\r\n<style>\r\n    .wrapper{\r\n        background-image: linear-gradient(80deg, #818181, #313131, #111111);\r\n        margin: 0;\r\n    }\r\n    .main-sale{\r\n        margin: 0px;\r\n        background-color: #000000;\r\n        border-radius: .25rem;\r\n        padding: 1.5em;\r\n        height: max-content;\r\n    }\r\n    .slot-value{\r\n        font-size: 1em;\r\n        font-family: 'Courier New', Courier, monospace;\r\n        font-weight: bold;\r\n        width: max-content;\r\n        color: #00ff00;\r\n    }\r\n    .slot-label{\r\n        width: 4rem;\r\n        display: inline-block;\r\n        height: max-content;\r\n        background-color: #000;\r\n        border-radius: 3px;\r\n    }\r\n    .main-sale-in{\r\n        width: 5rem;\r\n        display: grid;\r\n        border-radius: 0.5em;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n</style>","<script lang=\"ts\">\r\n    import {drawerSlots, MONEY} from '../stores/cash-drawer';\r\n\r\n    const randomize = function(event: MouseEvent): void{\r\n        event.preventDefault();\r\n        const randNum = function(val: number): number{\r\n            // Use a money value to multiply with a randomly generated number.\r\n            let num = Math.round((Math.random() * Math.random() - Math.random() + Math.random()) * 100);\r\n            num = Math.round(num * val * 100) / 100; // eliminate any trailing decimal values equal to less than a penny\r\n            return (num < 0) ? 0 : num; // no negative values allowed\r\n        }\r\n        drawerSlots.forEach((slot, index: number): void =>{\r\n            // use randomly generated numbers to change each slot value\r\n            slot.set(randNum(MONEY[index][1]));\r\n        });\r\n    }\r\n</script>\r\n\r\n<button\r\n    class=\"neutral-button\"\r\n    on:click={randomize}\r\n>\r\n    Randomize cash drawer\r\n</button>\r\n","<script lang=\"ts\">\r\n    import { drawerSlots } from '../stores/cash-drawer';\r\n\r\n    const emptyDrawer = function(event: MouseEvent): void{\r\n        event.preventDefault();\r\n        drawerSlots.forEach((slot): void =>{\r\n            // set all slots to 0\r\n            slot.set(0);\r\n        });\r\n    }\r\n</script>\r\n\r\n<button\r\n    class=\"bad-button\"\r\n    on:click={emptyDrawer}\r\n>\r\n    Empty cash drawer\r\n</button>\r\n","<script lang=\"ts\">\r\n    import type {Writable} from 'svelte/store';\r\n    // import validate function for event handler, test separately\r\n\r\n    export let drawerSlot: Writable<number>; // configure to be usable by main transaction: use ternary operator  \r\n    export let name: string; // name of the slot, money type\r\n    export let slotUnitVal: number; // the dollar value of ONE bill/coin in this particular drawer slot. EX: a penny slot's \"slotUnitVal\" would be ($) 0.01\r\n    export let editable: boolean = true; // user can make the input readonly; default is editable\r\n    \r\n    const minimum: number = 0;\r\n    // slot total will initially be 0, while store value for the slot is displayed to side\r\n\r\n    $: roundedSlot = Math.round(100 * Number($drawerSlot)) / 100 || 0; // Dollar value Total for this slot; default to an empty slot\r\n    $: slotDisplay = \"$\".concat(String(roundedSlot.toFixed(2))); // The slot's dollar value formatted as money. ex: $0.00\r\n    $: validatedTotal = Math.round(roundedSlot / slotUnitVal);\r\n\r\n    const validate = function(event: any, userInput: number = validatedTotal, unitVal: number = slotUnitVal):void{ // validate user input and alter the value in the drawer store\r\n        event.preventDefault(); // Prevent page reload\r\n        userInput = Number(Math.round(userInput)) || 0; // validate input: must be an integer\r\n        let newSlotTotal = userInput * unitVal; // multiply the slot's unit value by the unit count (example: 2 $5 bills means a total slot value of $10)\r\n        drawerSlot.update(n => n = Math.round(100 * newSlotTotal) / 100); // update the drawersSlot store value, rounded to the nearest penny\r\n    }\r\n\r\n    const directlyEditable = function(){\r\n        // handler func for if user sets the editable prop\r\n        return !editable;\r\n    }\r\n</script>\r\n\r\n<li class=\"grid-item\">\r\n    <div class=\"slot-card\">\r\n        <label for={name} class=\"slot-label\">{name}</label>\r\n        <input \r\n            class=\"money-slot-input\"\r\n            type=\"number\"\r\n            inputmode=\"numeric\"\r\n            step=1\r\n            name={name}\r\n            min={minimum}\r\n            placeholder={String(minimum)}\r\n            bind:value={validatedTotal}\r\n            readonly={directlyEditable()}\r\n            on:input={validate}\r\n            on:change={validate}\r\n            >\r\n        <p class=\"slot-value\">{slotDisplay}</p>\r\n    </div>\r\n</li>\r\n\r\n<style>\r\n    .slot-label{\r\n        width: 4rem;\r\n        display: inline-block;\r\n        height: max-content;\r\n        background-color: #000;\r\n        border-radius: 3px;\r\n    }\r\n    .slot-card{\r\n        display: grid;\r\n        width: min-content;\r\n        /* background-image:radial-gradient(#556b2f, #008800); #00bfff, */\r\n        background-image: linear-gradient(45deg, #00008b,#4b0082);\r\n        border-radius: 0.5em;\r\n        width: 5rem;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n    .money-slot-input{\r\n        text-align: center;\r\n        width: 4rem;\r\n        margin: auto;\r\n        height: min-content;\r\n        border: 2px solid #cccccc;\r\n    }\r\n    .slot-value{\r\n        background-color: #000;\r\n        font-size: 1em;\r\n        font-family: 'Courier New', Courier, monospace;\r\n        font-weight: bold;\r\n        width: 4rem;\r\n        border-radius: 3px;\r\n    }\r\n</style>","<script lang=\"ts\">\r\n    import { drawerSlots, MONEY } from '../stores/cash-drawer';\r\n    import RandomButton from './randomize-button.svelte';\r\n    import EmptyButton from './empty-drawer.svelte';\r\n    import SlotInterface from './slot-interface.svelte';\r\n</script>\r\n\r\n<section class=\"money-pile-display\">\r\n    <h4>Customize Cash in Each Drawer Slot Before Sale:</h4>\r\n    <aside>Enter the desired number of bills/coins in each slot. Inputs will be rounded to nearest integer.</aside>\r\n    <ol class=\"grid-container\">\r\n        {#each drawerSlots as slot, index}\r\n            <li class=\"money-in-li\">\r\n                <svelte:component \r\n                    this={SlotInterface}   \r\n                    drawerSlot={slot}\r\n                    name={MONEY[index][0]}\r\n                    slotUnitVal={MONEY[index][1]}\r\n                    editable={true}\r\n                    >\r\n                </svelte:component>\r\n            </li>\r\n        {/each}\r\n    </ol>\r\n    <svelte:component this={RandomButton}></svelte:component>\r\n    <svelte:component this={EmptyButton}></svelte:component>\r\n</section>\r\n\r\n<style>\r\n    h4, aside{\r\n        color: #00ff00;\r\n        font-weight: bold;\r\n    }\r\n    .money-pile-display{\r\n        background-image: linear-gradient(45deg, #111111, #313131, #808080);\r\n    }\r\n    aside{\r\n        font-size: 0.5rem;\r\n    }\r\n</style>","<script lang=\"ts\">\n\timport TransactionControls from './components/transaction-controls.svelte';\n\timport CashDrawer from './components/drawer-interface.svelte';\n\t// import MoneyPile from './components/money-pile.svelte';\n\t// import { changePile } from './stores/cash-drawer'; // this is a store value that will be changed based on the result of running the \"make-change\" program\n\t\n</script>\n\n<main>\n\t<svelte:component this={TransactionControls}></svelte:component>\n\t<svelte:component this={CashDrawer}></svelte:component>\n\t<!-- <svelte:component this={MoneyPile} pile={changePile}></svelte:component> -->\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",null],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","component_subscribe","component","callback","$$","on_destroy","push","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","to_number","set_data","wholeText","set_input_value","input","current_component","set_current_component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","minimum","span","drawerSlot","step","editable","$$invalidate","slotTotal","Math","round","Number","$drawerSlot","slotDisplay","concat","String","toFixed","validatedIn","preventDefault","n","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","MONEY","price","paid","drawerSlots","precise","decimal","decimalPlaces","factor","pow","h4","ol","t0_value","t2_value","classifyMoney","li","p0","p1","t0","t2","create_if_block","moneyType","pile","p_1","if_block","MoneyPile2","button","q","f","t","tw","h","changePile","prodPrice","$price","cashGiven","$paid","totPennies","$p","totNickles","$n","totDimes","$d","totQuarters","$q","totOnes","$o","totFives","$f","totTens","$t","totTwenties","$tw","totHundreds","$h","message","errorMessage","pileOfChange","status","drawerBuffer","transaction","cash","cid","console","log","stillDue_$","change","totalTill","arr2D","counter","tillCount","slot","slotCopy","recurseCount","owed_$","index_$","unitVal","type_$","remainder","maxFromSlot","unitCount","giveFromSlot","makeChange","newPile","NumberBox","GiveChangeButton","section1","section0","span0","label0","span1","label1","span2","due","val","num","random","randNum","div","label","slotUnitVal","roundedSlot","validatedTotal","userInput","newSlotTotal","SlotInterface","RandomButton","EmptyButton","section","aside","each_blocks","TransactionControls","CashDrawer","main","querySelector"],"mappings":"gCAAA,SAASA,KAgBT,SAASC,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EAqBhF,SAASE,EAAUC,KAAUC,GACzB,GAAa,MAATD,EACA,OAAOf,EAEX,MAAMiB,EAAQF,EAAMD,aAAaE,GACjC,OAAOC,EAAMC,YAAc,IAAMD,EAAMC,cAAgBD,EAO3D,SAASE,EAAoBC,EAAWL,EAAOM,GAC3CD,EAAUE,GAAGC,WAAWC,KAAKV,EAAUC,EAAOM,IAmFlD,SAASI,EAAcC,GACnB,OAAgB,MAATA,EAAgB,GAAKA,EAgKhC,SAASC,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAoDvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAUxC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAEhC,SAASQ,EAAaC,EAAYC,GAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,GAAK,EACpCF,EAAWE,IACXF,EAAWE,GAAGE,EAAEH,GAG5B,SAASI,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAoBlC,SAASG,EAAKC,GACV,OAAOH,SAASI,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAEhB,SAASI,IACL,OAAOJ,EAAK,IAEhB,SAASK,EAAOvB,EAAMwB,EAAOC,EAASC,GAElC,OADA1B,EAAK2B,iBAAiBH,EAAOC,EAASC,GAC/B,IAAM1B,EAAK4B,oBAAoBJ,EAAOC,EAASC,GA8B1D,SAASG,EAAK7B,EAAM8B,EAAWjC,GACd,MAATA,EACAG,EAAK+B,gBAAgBD,GAChB9B,EAAKgC,aAAaF,KAAejC,GACtCG,EAAKiC,aAAaH,EAAWjC,GAkDrC,SAASqC,EAAUrC,GACf,MAAiB,KAAVA,EAAe,MAAQA,EAkIlC,SAASsC,EAASjB,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKkB,YAAcjB,IACnBD,EAAKC,KAAOA,GAEpB,SAASkB,EAAgBC,EAAOzC,GAC5ByC,EAAMzC,MAAiB,MAATA,EAAgB,GAAKA,EAyTvC,IAAI0C,EACJ,SAASC,EAAsBjD,GAC3BgD,EAAoBhD,EA2DxB,MAAMkD,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EAWvB,SAASC,EAAoB5E,GACzBsE,EAAiBhD,KAAKtB,GAuB1B,MAAM6E,EAAiB,IAAIC,IAC3B,IAAIC,EAAW,EACf,SAASC,IACL,MAAMC,EAAkBf,EACxB,EAAG,CAGC,KAAOa,EAAWX,EAAiB7B,QAAQ,CACvC,MAAMrB,EAAYkD,EAAiBW,GACnCA,IACAZ,EAAsBjD,GACtBgE,EAAOhE,EAAUE,IAKrB,IAHA+C,EAAsB,MACtBC,EAAiB7B,OAAS,EAC1BwC,EAAW,EACJV,EAAkB9B,QACrB8B,EAAkBc,KAAlBd,GAIJ,IAAK,IAAI/B,EAAI,EAAGA,EAAIgC,EAAiB/B,OAAQD,GAAK,EAAG,CACjD,MAAMnB,EAAWmD,EAAiBhC,GAC7BuC,EAAeO,IAAIjE,KAEpB0D,EAAeQ,IAAIlE,GACnBA,KAGRmD,EAAiB/B,OAAS,QACrB6B,EAAiB7B,QAC1B,KAAOgC,EAAgBhC,QACnBgC,EAAgBY,KAAhBZ,GAEJI,GAAmB,EACnBE,EAAeS,QACfnB,EAAsBc,GAE1B,SAASC,EAAO9D,GACZ,GAAoB,OAAhBA,EAAGmE,SAAmB,CACtBnE,EAAG8D,SACH9E,EAAQgB,EAAGoE,eACX,MAAMC,EAAQrE,EAAGqE,MACjBrE,EAAGqE,MAAQ,EAAE,GACbrE,EAAGmE,UAAYnE,EAAGmE,SAASG,EAAEtE,EAAGuE,IAAKF,GACrCrE,EAAGwE,aAAatF,QAAQsE,IAiBhC,MAAMiB,EAAW,IAAIf,IACrB,IAAIgB,EACJ,SAASC,IACLD,EAAS,CACLE,EAAG,EACHC,EAAG,GACHP,EAAGI,GAGX,SAASI,IACAJ,EAAOE,GACR5F,EAAQ0F,EAAOG,GAEnBH,EAASA,EAAOJ,EAEpB,SAASS,EAAcC,EAAOC,GACtBD,GAASA,EAAM9D,IACfuD,EAASS,OAAOF,GAChBA,EAAM9D,EAAE+D,IAGhB,SAASE,EAAeH,EAAOC,EAAOrE,EAAQb,GAC1C,GAAIiF,GAASA,EAAMI,EAAG,CAClB,GAAIX,EAAST,IAAIgB,GACb,OACJP,EAASR,IAAIe,GACbN,EAAOG,EAAE3E,MAAK,KACVuE,EAASS,OAAOF,GACZjF,IACIa,GACAoE,EAAM5D,EAAE,GACZrB,QAGRiF,EAAMI,EAAEH,IAmpBhB,SAASI,EAAiBL,GACtBA,GAASA,EAAMH,IAKnB,SAASS,EAAgBxF,EAAWQ,EAAQI,EAAQ6E,GAChD,MAAMpB,SAAEA,EAAQqB,SAAEA,EAAQvF,WAAEA,EAAUuE,aAAEA,GAAiB1E,EAAUE,GACnEmE,GAAYA,EAASsB,EAAEnF,EAAQI,GAC1B6E,GAED/B,GAAoB,KAChB,MAAMkC,EAAiBF,EAASG,IAAIhH,GAAKiH,OAAOzG,GAC5Cc,EACAA,EAAWC,QAAQwF,GAKnB1G,EAAQ0G,GAEZ5F,EAAUE,GAAGwF,SAAW,MAGhChB,EAAatF,QAAQsE,GAEzB,SAASqC,EAAkB/F,EAAWmB,GAClC,MAAMjB,EAAKF,EAAUE,GACD,OAAhBA,EAAGmE,WACHnF,EAAQgB,EAAGC,YACXD,EAAGmE,UAAYnE,EAAGmE,SAAS/C,EAAEH,GAG7BjB,EAAGC,WAAaD,EAAGmE,SAAW,KAC9BnE,EAAGuE,IAAM,IAGjB,SAASuB,EAAWhG,EAAWoB,IACI,IAA3BpB,EAAUE,GAAGqE,MAAM,KACnBrB,EAAiB9C,KAAKJ,GA3zBrByD,IACDA,GAAmB,EACnBH,EAAiB2C,KAAKnC,IA2zBtB9D,EAAUE,GAAGqE,MAAM2B,KAAK,IAE5BlG,EAAUE,GAAGqE,MAAOnD,EAAI,GAAM,IAAO,GAAMA,EAAI,GAEnD,SAAS+E,EAAKnG,EAAWmC,EAASiE,EAAUC,EAAiBC,EAAWC,EAAOC,EAAejC,EAAQ,EAAE,IACpG,MAAMkC,EAAmBzD,EACzBC,EAAsBjD,GACtB,MAAME,EAAKF,EAAUE,GAAK,CACtBmE,SAAU,KACVI,IAAK,KAEL8B,MAAAA,EACAvC,OAAQpF,EACR0H,UAAAA,EACAI,MAAO3H,IAEP2G,SAAU,GACVvF,WAAY,GACZwG,cAAe,GACfrC,cAAe,GACfI,aAAc,GACdkC,QAAS,IAAIC,IAAI1E,EAAQyE,UAAYH,EAAmBA,EAAiBvG,GAAG0G,QAAU,KAEtFhH,UAAWb,IACXwF,MAAAA,EACAuC,YAAY,EACZC,KAAM5E,EAAQ3B,QAAUiG,EAAiBvG,GAAG6G,MAEhDP,GAAiBA,EAActG,EAAG6G,MAClC,IAAIC,GAAQ,EAkBZ,GAjBA9G,EAAGuE,IAAM2B,EACHA,EAASpG,EAAWmC,EAAQoE,OAAS,IAAI,CAACnF,EAAG6F,KAAQC,KACnD,MAAM5G,EAAQ4G,EAAK7F,OAAS6F,EAAK,GAAKD,EAOtC,OANI/G,EAAGuE,KAAO6B,EAAUpG,EAAGuE,IAAIrD,GAAIlB,EAAGuE,IAAIrD,GAAKd,MACtCJ,EAAG4G,YAAc5G,EAAGwG,MAAMtF,IAC3BlB,EAAGwG,MAAMtF,GAAGd,GACZ0G,GACAhB,EAAWhG,EAAWoB,IAEvB6F,KAET,GACN/G,EAAG8D,SACHgD,GAAQ,EACR9H,EAAQgB,EAAGoE,eAEXpE,EAAGmE,WAAWgC,GAAkBA,EAAgBnG,EAAGuE,KAC/CtC,EAAQ3B,OAAQ,CAChB,GAAI2B,EAAQgF,QAAS,CAEjB,MAAMC,EA52ClB,SAAkB7F,GACd,OAAO8F,MAAMC,KAAK/F,EAAQgG,YA22CJC,CAASrF,EAAQ3B,QAE/BN,EAAGmE,UAAYnE,EAAGmE,SAASoD,EAAEL,GAC7BA,EAAMhI,QAAQ0B,QAIdZ,EAAGmE,UAAYnE,EAAGmE,SAASU,IAE3B5C,EAAQuF,OACRzC,EAAcjF,EAAUE,GAAGmE,UAC/BmB,EAAgBxF,EAAWmC,EAAQ3B,OAAQ2B,EAAQvB,OAAQuB,EAAQsD,eAEnE3B,IAEJb,EAAsBwD,GAkD1B,MAAMkB,EACFC,WACI7B,EAAkB8B,KAAM,GACxBA,KAAKD,SAAWhJ,EAEpBkJ,IAAIC,EAAM9H,GACN,MAAML,EAAaiI,KAAK3H,GAAGN,UAAUmI,KAAUF,KAAK3H,GAAGN,UAAUmI,GAAQ,IAEzE,OADAnI,EAAUQ,KAAKH,GACR,KACH,MAAM+H,EAAQpI,EAAUqI,QAAQhI,IACjB,IAAX+H,GACApI,EAAUsI,OAAOF,EAAO,IAGpCG,KAAKC,GA34DT,IAAkBC,EA44DNR,KAAKS,QA54DCD,EA44DkBD,EA34DG,IAA5BpJ,OAAOuJ,KAAKF,GAAKhH,UA44DhBwG,KAAK3H,GAAG4G,YAAa,EACrBe,KAAKS,MAAMF,GACXP,KAAK3H,GAAG4G,YAAa,2FCl5DNrC,EAAW,sGARxBA,EAAI,sBAEG,oBACR+D,cACC/D,EAAI,eAEAA,EAAgB,sDAXlC9D,EAcOH,EAAAiI,EAAA7H,GAbHL,EAWKkI,EAAA1F,OANW0B,EAAW,WAO3BlE,EAAuCkI,EAAAjE,gDAHzBC,EAAQ,qCALZA,EAAI,oBAIJA,EAAI,sBAHEA,EAAW,QAAXA,EAAW,cAOJA,EAAW,sCA/B5B,MAAA+D,EAAkB,sHALbE,GAA4BN,eAC5B5G,GAAY4G,QACZO,GAAYP,YACZQ,GAAiBR,sLAIzBS,EAAA,EAAAC,EAAYC,KAAKC,MAAM,IAAMC,OAAOC,IAAgB,KAAO,mBAC3DL,EAAA,EAAAM,EAAc,IAAIC,OAAOC,OAAOP,EAAUQ,QAAQ,sBAEpDT,EAAA,EAAEU,EAAcT,wBAES7G,GACtBA,EAAMuH,iBACNX,EAAA,EAAAU,EAAcN,OAAOM,IAAgB,GACrCb,EAAW1E,QAAOyF,GAASV,KAAKC,MAAM,IAAMO,GAAe,OAGzC,kBACVX,oBAUIW,EAAW5G,EAAAkF,KAAAvH,gIC7B/B,MAAMoJ,EAAmB,GAgBzB,SAASC,EAASrJ,EAAOsJ,EAAQhL,GAC7B,IAAIiL,EACJ,MAAMC,EAAc,IAAIlG,IACxB,SAASmG,EAAIC,GACT,GAAIzK,EAAee,EAAO0J,KACtB1J,EAAQ0J,EACJH,GAAM,CACN,MAAMI,GAAaP,EAAiBrI,OACpC,IAAK,MAAM6I,KAAcJ,EACrBI,EAAW,KACXR,EAAiBtJ,KAAK8J,EAAY5J,GAEtC,GAAI2J,EAAW,CACX,IAAK,IAAI7I,EAAI,EAAGA,EAAIsI,EAAiBrI,OAAQD,GAAK,EAC9CsI,EAAiBtI,GAAG,GAAGsI,EAAiBtI,EAAI,IAEhDsI,EAAiBrI,OAAS,IAuB1C,MAAO,CAAE0I,IAAAA,EAAK/F,OAlBd,SAAgBlF,GACZiL,EAAIjL,EAAGwB,KAiBWZ,UAftB,SAAmBb,EAAKsL,EAAavL,GACjC,MAAMsL,EAAa,CAACrL,EAAKsL,GAMzB,OALAL,EAAY3F,IAAI+F,GACS,IAArBJ,EAAYM,OACZP,EAAOD,EAAMG,IAAQnL,GAEzBC,EAAIyB,GACG,KACHwJ,EAAY1E,OAAO8E,GACM,IAArBJ,EAAYM,OACZP,IACAA,EAAO,SCnDhB,MAAMQ,EAAyC,CAIlD,CAAC,QAAS,KACV,CAAC,SAAU,KACX,CAAC,OAAQ,IACT,CAAC,UAAW,KACZ,CAAC,MAAO,GACR,CAAC,OAAQ,GACT,CAAC,MAAO,IACR,CAAC,SAAU,IACX,CAAC,cAAe,MAGPC,GAAQX,EAAS,IACjBY,GAAOZ,EAAS,IAahBa,GAAc,CAVAb,EAAS,IACTA,EAAS,KACXA,EAAS,IACNA,EAAS,MACbA,EAAS,IACRA,EAAS,IACVA,EAAS,KACLA,EAAS,KACTA,EAAS,MC9Bb,SAAAc,GAAQC,EAAiBC,EAAwB,GACrE,IAAIC,EAAS7B,KAAA8B,IAAA,GAAMF,GAEnB,OAAO5B,KAAKC,MAAM4B,EAASF,GAAWE,oPC0B1CjK,EAA+HH,EAAAgE,EAAA5D,kDATpH6D,EAAI,wBAATpD,OAAID,GAAA,gMAFVT,EAAsBH,EAAAsK,EAAAlK,YACtBD,EAOKH,EAAAuK,EAAAnK,0EANM6D,EAAI,WAATpD,OAAID,GAAA,EAAA,mHAAJC,kFAEU2J,EAAAvG,KAAS,GAAC,GACyBwG,EAAA,IAAI7B,OAAOC,OAAOJ,OAAOxE,EAAS,GAAA,IAAI6E,QAAQ,KAAC,oFAA5E4B,GAAczG,EAAQ,GAAC,KAAC,0BAFtC9D,EAGKH,EAAA2K,EAAAvK,GAFDL,EAAoB4K,EAAAC,iBACpB7K,EAA8F4K,EAAAE,yBAD1F,EAAA9G,GAAAyG,KAAAA,EAAAvG,KAAS,GAAC,KAAA7B,EAAA0I,EAAAN,GACyB,EAAAzG,GAAA0G,KAAAA,EAAA,IAAI7B,OAAOC,OAAOJ,OAAOxE,EAAS,GAAA,IAAI6E,QAAQ,KAAC,KAAA1G,EAAA2I,EAAAN,iBAA5EC,GAAczG,EAAQ,GAAC,KAAC,uFANzC,OAAAA,KAAKpD,OAAMmK,0LAZH,SAAAN,GAAcO,UACZA,OACE,cAAgB,oBAChB,eAAiB,kCACjB,WACA,gBAAkB,6BACP,8CARbC,EAAI,IAAAtD,yKCqFW3D,EAAO,wDAAjC9D,EAAsCH,EAAAmL,EAAA/K,8BAAZ6D,EAAO,+DAD/BmH,EAAAnH,KAAapD,QAAMmK,GAAA/G,SAGDoH,oCAAkBpH,EAAY,iGAJnD,uBAAgBA,EAAM,8GADzB9D,EAA4FH,EAAAsL,EAAAlL,YAC5FD,EAA8BH,EAAAmL,EAAA/K,2FADyB6D,EAAe,qCACnDA,EAAM,IACnBA,KAAapD,uGAGuBoD,EAAY,WAA9BoH,IAAU,qbA7EzB,IAAArH,EAAEiF,EAAEnI,EAAEyK,EAAEzG,EAAE0G,EAAEC,EAAEC,EAAGC,GAAK3B,6MAqBvB4B,EAAU,oDA1BXC,EAAYC,4BACZC,EAAYC,2BAMZC,EAAaxD,OAAOyD,4BACpBC,EAAa1D,OAAO2D,4BACpBC,EAAW5D,OAAO6D,4BAClBC,EAAc9D,OAAO+D,2BACrBC,EAAUhE,OAAOiE,2BACjBC,EAAWlE,OAAOmE,2BAClBC,EAAUpE,OAAOqE,0BACjBC,EAActE,OAAOuE,0BACrBC,EAAcxE,OAAOyE,qBAQrB7E,EAAA,EAAA8E,EAAUC,GAAgB,yBAU5B/E,EAAA,EAAEgF,EAAezB,IAZjBvD,EAAA,EAAEiF,EAAS,QACXjF,EAAA,EAAE+E,EAAe,+BAaT,SAAgB3L,GACrBA,EAAMuH,qBAEFuE,EAAY,CAEX,CAAA,QAAStB,GACT,CAAA,SAAUE,GACV,CAAA,OAAQE,GACR,CAAA,UAAWE,GACX,CAAA,MAAOE,GACP,CAAA,OAAQE,GACR,CAAA,MAAOE,GACP,CAAA,SAAUE,GACV,CAAA,cAAeE,IAOhBO,EC7CY,SAAkB1D,EAAe2D,EAAcC,GACrE5D,EAAQG,GAAQH,GAChB2D,EAAOxD,GAAQwD,GACfE,QAAQC,IAAI,SAAU9D,EAAO,QAAS2D,GACtC,IAAII,EAAa5D,GAAQwD,EAAO3D,GAGhC,GAFA6D,QAAQC,IAAI,+BAAgCC,GAEzCA,EAAa,EACd,MAAQ,CAAEP,OAAQ,uBAAwBH,QAAS,6BAA8BW,OAAQ,IAG3F,IAAIlC,EAAmC,GAanCmC,EARJ,SAAmBC,GACjB,IAAIC,EAAkB,EACtB,IAAK,IAAIrN,EAAI,EAAGA,EAAIoN,EAAMnN,OAAQD,IAChCqN,GAAWD,EAAMpN,GAAG,GAGtB,OADAqN,EAAUhE,GAAQgE,GACXA,EAEOC,CAAUR,GAI1B,GAAIK,EAAYF,EACd,MAAO,CAAEP,OAAQ,qBAAsBQ,OAAQ,IAC1C,GAAIC,IAAcF,EAavB,OAVAH,EAAI9O,SAASuP,IAGX,IAAIC,EAA0B,IAAID,GAC/BC,EAAS,GAAK,GACbxC,EAAWhM,KAAKwO,GAEpBD,EAAK,GAAK,KAEZR,QAAQC,IAAI,4BAA6B,kBAAmBF,GACrD,CAAEJ,OAAQ,SAAUQ,OAAQlC,GAC9B,CAEL,SAASyC,EAAaC,EAAiBrE,GAAQ4D,GAAaU,GAC1D,GAAe,IAAXD,GAAgBC,EAAU,EAC5B,OAEFZ,QAAQC,IAAI,WAAY/D,EAAM0E,GAAS,GAAI,IAAKV,GAEhD,IAAIvF,EAAoBoF,EAAIa,GAAS,GACjCC,EAAkB3E,EAAM0E,GAAS,GAErC,GAAiB,GAAbjG,GAAkBgG,EAASE,EAG7B,YADAH,EAAaC,EAAQC,EAAU,GAIjC,IAAIE,EAAS5E,EAAM0E,GAAS,GAS3B,GAAID,GAAUE,GAAWlG,GAAakG,EAAS,CAG9C,IAAIE,EAAYJ,EAASE,EACrBG,EAAcL,EAASrE,GAAQyE,GAE/BE,EAAY,EAChB,KAAQA,EAAYtG,EAAYkG,GAAaI,EAAYD,EAAcH,GACrEI,GAAa,EAGf,IAAIC,EAAeD,EAAYJ,EAa/B,OAXA5C,EAAWhM,KAAK,CAAC6O,EAAQI,IACxBnB,EAAIa,GAAS,IAAiBM,EAC/BH,GAAaC,EAAcE,EAG3BhB,EAAaa,EAGbb,EAAa5D,GAAQ4D,GACrBF,QAAQC,IAAI,aAAcC,QAC1BQ,EAAaR,EAAYU,EAAU,IAKvCF,EAAaR,EAAYH,EAAI7M,OAAS,GAGxC,OAAIoJ,GAAQ4D,GAAc,EAGjB,CAAEP,OAAQ,qBAAsBH,QAAS,6BAA8BW,OAAQ,IAG/E,CAAER,OAAQ,OAAQQ,OAAQlC,GD9DXkD,CAAWjD,EAAWE,EAAWwB,GAC/CO,EAAoCN,EAAYM,OA5B/C,IAAciB,EAiChB,GAjCgBA,EA6BLjB,OA5BdlC,EAAW/K,OAAS,EAAC+K,GACrBvD,EAAA,GAAAuD,MAAiBmD,QA6BjBzB,EAASE,EAAYF,QAElBE,EAAYL,eACXQ,QAAQC,IAAI,iBAAkBJ,EAAYL,kBAC1CC,EAAeI,EAAYL,SAG/BQ,QAAQC,IAAI,mBAAoBE,GAChCH,QAAQC,IAAI,2BAA4BL,GACxCvD,GAAYpL,SAAS,CAAAuP,EAAM3G,KAEvB2G,EAAK3K,QAAOyF,GAAKgB,GAAQsD,EAAa/F,GAAO,+KEjEnCwH,mCACA,aACA,eACMlF,aACF,4BAKJkF,mCACA,YACA,eACMjF,aACF,4BAMEkF,6OAJd,6BACiChL,EAAG,sYArBlD9D,EAyBUH,EAAAkP,EAAA9O,GAxBNL,EAsBUmP,EAAAC,GArBNpP,EAQOoP,EAAAC,GAPHrP,EAAoDqP,EAAAC,gCAQxDtP,EAQOoP,EAAAG,GAPHvP,EAAkDuP,EAAAC,gCAQtDxP,EAEOoP,EAAAK,UADSzP,EAA+ByP,EAAAxL,yDAhBjCgL,GAAS,+IASTA,GAAS,uJAOgB/K,EAAG,WAGtBgL,IAAgB,2bA3BrC5G,EAAA,EAAAoH,EAAU,IAAA5G,OAAOJ,OAAOuD,EAAQF,GAAQhD,QAAQ,8MCavD3I,EAKSH,EAAAsL,EAAAlL,qBAHK6D,EAAS,8EAjBQxC,GACvBA,EAAMuH,iBAONgB,GAAYpL,SAAS,CAAAuP,EAAM3G,KAEvB2G,EAAK5E,aARgBmG,OAEjBC,EAAMpH,KAAKC,MAAwE,KAAjED,KAAKqH,SAAWrH,KAAKqH,SAAWrH,KAAKqH,SAAWrH,KAAKqH,WAEnE,OADRD,EAAMpH,KAAKC,MAAMmH,EAAMD,EAAM,KAAO,IAC5BC,EAAM,EAAK,EAAIA,EAIdE,CAAQhG,EAAMrC,GAAO,gMCD1CrH,EAKSH,EAAAsL,EAAAlL,qBAHK6D,EAAW,8EAXQxC,GACzBA,EAAMuH,iBACNgB,GAAYpL,SAASuP,IAEjBA,EAAK5E,IAAI,kKCwByBtF,EAAI,0CAcnBA,EAAW,cAdtBA,EAAI,qKAMNA,EAAI,cACL+D,IACQlG,EAAAS,EAAA,cAAAsG,OAAOb,gBAEV/D,EAAgB,qHAZtC9D,EAkBKH,EAAA2K,EAAAvK,GAjBDL,EAgBM4K,EAAAmF,GAfF/P,EAAmD+P,EAAAC,iBACnDhQ,EAYK+P,EAAAvN,OAJW0B,EAAc,WAK9BlE,EAAuC+P,EAAA9L,gDAHzBC,EAAQ,iBACPA,EAAQ,8BAZeA,EAAI,mBAA9BA,EAAI,oBAMNA,EAAI,sBAGEA,EAAc,QAAdA,EAAc,aAKPA,EAAW,sCApChC,MAAA+D,GAAkB,uHALbE,GAA4BN,eAC5B5G,GAAY4G,eACZoI,GAAmBpI,GACnBQ,SAAAA,GAAoB,GAAIR,oMAKhCS,EAAA,EAAA4H,EAAc1H,KAAKC,MAAM,IAAMC,OAAOC,IAAgB,KAAO,mBAC7DL,EAAA,EAAAM,EAAc,IAAIC,OAAOC,OAAOoH,EAAYnH,QAAQ,sBACtDT,EAAA,EAAE6H,EAAiB3H,KAAKC,MAAMyH,EAAcD,cAE/B,SAAYvO,EAAY0O,EAAoBD,EAAgB1B,EAAkBwB,GACxFvO,EAAMuH,qBAEFoH,GADJD,EAAY1H,OAAOF,KAAKC,MAAM2H,KAAe,GACd3B,EAC/BtG,EAAW1E,QAAOyF,GAASV,KAAKC,MAAM,IAAM4H,GAAgB,OAG1C,kBAEVhI,sBAeQ8H,EAAc/N,EAAAkF,KAAAvH,iPC1BZuQ,0CACMpM,EAAI,QACV4F,EAAM5F,EAAK,IAAE,eACN4F,EAAM5F,EAAK,IAAE,aAChB,0GANlB9D,EASKH,EAAA2K,EAAAvK,gDAPSiQ,IAAa,8QAHxBrG,wBAALnJ,OAAID,GAAA,oEAac0P,0BACAC,sfAlB5BpQ,EAmBUH,EAAAwQ,EAAApQ,GAlBNL,EAAwDyQ,EAAAlG,UACxDvK,EAA+GyQ,EAAAC,UAC/G1Q,EAaKyQ,EAAAjG,6HAZMP,WAALnJ,OAAID,GAAA,EAAA,2GAAJC,OAAID,EAAA8P,EAAA7P,OAAAD,GAAA,qBAac0P,IAAY,2IACZC,IAAW,kKAd7B1P,OAAID,GAAA,uTCFW+P,0BACAC,gIAFzBzQ,EAIMH,EAAA6Q,EAAAzQ,iEAHmBuQ,IAAmB,2IACnBC,IAAU,+RCRvB,oEAAQ,CACnB5Q,OAAQiB,SAAS6P,cAAc"}